---
source: compiler-core/src/go/tests/functions.rs
expression: "\npub fn twice(f: fn(t) -> t, x: t) -> t {\n  f(f(x))\n}\npub fn add_one(x: Int) -> Int {\n  x + 1\n}\npub fn add_two(x: Int) -> Int {\n  twice(add_one, x)\n}\n\npub fn take_two(x: Int) -> Int {\n  twice(fn(y) {y - 1}, x)\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

pub fn twice(f: fn(t) -> t, x: t) -> t {
  f(f(x))
}
pub fn add_one(x: Int) -> Int {
  x + 1
}
pub fn add_two(x: Int) -> Int {
  twice(add_one, x)
}

pub fn take_two(x: Int) -> Int {
  twice(fn(y) {y - 1}, x)
}


----- COMPILED GO
package mod_P

import (
  gleam_P "example.com/todo/gleam"
)

const _ = gleam_P.Use_Import
const Use_Import byte = 0

func Twice[I gleam_P.Type[I]](f gleam_P.Func1_t[I, I], x I) I {
  return f(f(x))
}

func AddOne(x gleam_P.Int_t) gleam_P.Int_t {
  return x + 1
}

func AddTwo(x gleam_P.Int_t) gleam_P.Int_t {
  return Twice[gleam_P.Int_t](AddOne, x)
}

func TakeTwo(x gleam_P.Int_t) gleam_P.Int_t {
  return Twice[gleam_P.Int_t](
    func(y gleam_P.Int_t) gleam_P.Int_t { return y - 1 },
    x,
  )
}
