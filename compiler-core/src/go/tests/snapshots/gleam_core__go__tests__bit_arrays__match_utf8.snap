---
source: compiler-core/src/go/tests/bit_arrays.rs
expression: "\nfn go(x) {\n  let assert <<\"Gleam üëç\":utf8>> = x\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

fn go(x) {
  let assert <<"Gleam üëç":utf8>> = x
}


----- COMPILED GO
package mod_P

import (
  gleam_P "example.com/todo/gleam"
)

const _ = gleam_P.Use_Import
const Use_Import byte = 0

func go π(x gleam_P.BitArray_t) gleam_P.BitArray_t {
  if 
    gleam_P.Bool_t(!x.ByteAt(0).Equal(0x47)) ||
    gleam_P.Bool_t(!x.ByteAt(1).Equal(0x6C)) ||
    gleam_P.Bool_t(!x.ByteAt(2).Equal(0x65)) ||
    gleam_P.Bool_t(!x.ByteAt(3).Equal(0x61)) ||
    gleam_P.Bool_t(!x.ByteAt(4).Equal(0x6D)) ||
    gleam_P.Bool_t(!x.ByteAt(5).Equal(0x20)) ||
    gleam_P.Bool_t(!x.ByteAt(6).Equal(0xF0)) ||
    gleam_P.Bool_t(!x.ByteAt(7).Equal(0x9F)) ||
    gleam_P.Bool_t(!x.ByteAt(8).Equal(0x91)) ||
    gleam_P.Bool_t(!x.ByteAt(9).Equal(0x8D)) ||
    !(len(x) == 10) {
    panic(gleam_P.MakeError(
      "let_assert",
      "my/mod",
      3,
      "go",
      "Pattern match failed, no pattern matched the value.",
      map[string]any{"value": x },
    ))
  }
  return x
}
