---
source: compiler-core/src/go/tests/records.rs
expression: "\npub type Person { Person(name: String, age: Int) }\npub fn get_age(person: Person) { person.age }\npub fn get_name(person: Person) { person.name }\n"
snapshot_kind: text
---
----- SOURCE CODE

pub type Person { Person(name: String, age: Int) }
pub fn get_age(person: Person) { person.age }
pub fn get_name(person: Person) { person.name }


----- COMPILED GO
package mod_P

import (
  gleam_P "example.com/todo/gleam"
)

const _ = gleam_P.Use_Import
const Use_Import byte = 0

type Person_c struct {Name gleam_P.String_t; Age gleam_P.Int_t}

func (c Person_c) Hash() uint32 {
  h := gleam_P.NewHash()
  var hh uint32
  hh = c.Name.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  hh = c.Age.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  return h.Sum32()
}
func (c Person_c) Equal(o Person_c) bool {
  _ = o
  if !c.Name.Equal(o.Name) { return false }
  if !c.Age.Equal(o.Age) { return false }
  return true
}

type Person_t = Person_c

func GetAge(person Person_t) gleam_P.Int_t {
  return person.Age
}

func GetName(person Person_t) gleam_P.String_t {
  return person.Name
}
