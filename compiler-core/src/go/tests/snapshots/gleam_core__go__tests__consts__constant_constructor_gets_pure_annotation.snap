---
source: compiler-core/src/go/tests/consts.rs
expression: "\npub type X {\n  X(Int, List(String))\n}\n\npub const x = X(1, [\"1\"])\nconst y = X(1, [])\n        "
snapshot_kind: text
---
----- SOURCE CODE

pub type X {
  X(Int, List(String))
}

pub const x = X(1, ["1"])
const y = X(1, [])
        

----- COMPILED GO
package mod_P

import (
  gleam_P "example.com/todo/gleam"
)

const _ = gleam_P.Use_Import
const Use_Import byte = 0

type X_c struct {P_0 gleam_P.Int_t; P_1 gleam_P.List_t[gleam_P.String_t]}

func (c X_c) Hash() uint32 {
  h := gleam_P.NewHash()
  var hh uint32
  hh = c.P_0.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  hh = c.P_1.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  return h.Sum32()
}
func (c X_c) Equal(o X_c) bool {
  _ = o
  if !c.P_0.Equal(o.P_0) { return false }
  if !c.P_1.Equal(o.P_1) { return false }
  return true
}

type X_t = X_c

var X X_t = X_c{1, gleam_P.ToList[gleam_P.String_t]("1")}

var y X_t = X_c{1, gleam_P.ToList[gleam_P.String_t]()}
