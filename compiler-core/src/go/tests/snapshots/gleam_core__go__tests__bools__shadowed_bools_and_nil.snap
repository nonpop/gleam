---
source: compiler-core/src/go/tests/bools.rs
expression: "\npub type True { True False Nil }\nfn go(x, y) {\n  let assert True = x\n  let assert False = x\n  let assert Nil = y\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

pub type True { True False Nil }
fn go(x, y) {
  let assert True = x
  let assert False = x
  let assert Nil = y
}


----- COMPILED GO
package mod_P

import (
  gleam_P "example.com/todo/gleam"
)

const _ = gleam_P.Use_Import
const Use_Import byte = 0

type True_t interface{
  iTrue_t()
  IsTrue() gleam_P.Bool_t
  AsTrue() True_c
  IsFalse() gleam_P.Bool_t
  AsFalse() False_c
  IsNil() gleam_P.Bool_t
  AsNil() Nil_c
  gleam_P.Type[True_t]
}

type True_c struct {}

func (True_c) iTrue_t() {}

func (True_c) IsTrue() gleam_P.Bool_t { return true }
func (c True_c) AsTrue() True_c { return c }

func (True_c) IsFalse() gleam_P.Bool_t { return false }
func (c True_c) AsFalse() False_c { panic("expected False value") }

func (True_c) IsNil() gleam_P.Bool_t { return false }
func (c True_c) AsNil() Nil_c { panic("expected Nil value") }

func (c True_c) Hash() uint32 { return gleam_P.HashConstructor(0) }
func (c True_c) Equal(o True_t) bool {
  if o, ok := o.(True_c); ok {
    _ = o
    return true
  }
  return false
}

type False_c struct {}

func (False_c) iTrue_t() {}

func (False_c) IsTrue() gleam_P.Bool_t { return false }
func (c False_c) AsTrue() True_c { panic("expected True value") }

func (False_c) IsFalse() gleam_P.Bool_t { return true }
func (c False_c) AsFalse() False_c { return c }

func (False_c) IsNil() gleam_P.Bool_t { return false }
func (c False_c) AsNil() Nil_c { panic("expected Nil value") }

func (c False_c) Hash() uint32 { return gleam_P.HashConstructor(1) }
func (c False_c) Equal(o True_t) bool {
  if o, ok := o.(False_c); ok {
    _ = o
    return true
  }
  return false
}

type Nil_c struct {}

func (Nil_c) iTrue_t() {}

func (Nil_c) IsTrue() gleam_P.Bool_t { return false }
func (c Nil_c) AsTrue() True_c { panic("expected True value") }

func (Nil_c) IsFalse() gleam_P.Bool_t { return false }
func (c Nil_c) AsFalse() False_c { panic("expected False value") }

func (Nil_c) IsNil() gleam_P.Bool_t { return true }
func (c Nil_c) AsNil() Nil_c { return c }

func (c Nil_c) Hash() uint32 { return gleam_P.HashConstructor(2) }
func (c Nil_c) Equal(o True_t) bool {
  if o, ok := o.(Nil_c); ok {
    _ = o
    return true
  }
  return false
}

func go π(x True_t, y True_t) True_t {
  if !x.IsTrue() {
    panic(gleam_P.MakeError(
      "let_assert",
      "my/mod",
      4,
      "go",
      "Pattern match failed, no pattern matched the value.",
      map[string]any{"value": x },
    ))
  }
  if !x.IsFalse() {
    panic(gleam_P.MakeError(
      "let_assert",
      "my/mod",
      5,
      "go",
      "Pattern match failed, no pattern matched the value.",
      map[string]any{"value": x },
    ))
  }
  if !y.IsNil() {
    panic(gleam_P.MakeError(
      "let_assert",
      "my/mod",
      6,
      "go",
      "Pattern match failed, no pattern matched the value.",
      map[string]any{"value": y },
    ))
  }
  return y
}
