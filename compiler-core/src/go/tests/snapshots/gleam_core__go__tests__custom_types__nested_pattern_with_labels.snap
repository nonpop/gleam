---
source: compiler-core/src/go/tests/custom_types.rs
expression: "pub type Box(x) { Box(a: Int, b: x) }\nfn go(x) {\n  case x {\n    Box(a: _, b: Box(a: a, b: b)) -> a + b\n    _ -> 1\n  }\n}\n"
snapshot_kind: text
---
----- SOURCE CODE
pub type Box(x) { Box(a: Int, b: x) }
fn go(x) {
  case x {
    Box(a: _, b: Box(a: a, b: b)) -> a + b
    _ -> 1
  }
}


----- COMPILED GO
package mod_P

import (
  gleam_P "example.com/todo/gleam"
)

const _ = gleam_P.Use_Import
const Use_Import byte = 0

type Box_c[I gleam_P.Type[I]] struct {A gleam_P.Int_t; B I}

func (c Box_c[I]) Hash() uint32 {
  h := gleam_P.NewHash()
  var hh uint32
  hh = c.A.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  hh = c.B.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  return h.Sum32()
}
func (c Box_c[I]) Equal(o Box_c[I]) bool {
  _ = o
  if !c.A.Equal(o.A) { return false }
  if !c.B.Equal(o.B) { return false }
  return true
}

type Box_t[I gleam_P.Type[I]] = Box_c[I]

func go π(x Box_t[Box_t[gleam_P.Int_t]]) gleam_P.Int_t {
  if true {
    var a gleam_P.Int_t = x.B.A
    _ = a
    var b gleam_P.Int_t = x.B.B
    _ = b
    return a + b
  } else {
    return 1
  }
}
