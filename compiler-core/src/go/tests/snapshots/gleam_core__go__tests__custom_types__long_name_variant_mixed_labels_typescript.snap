---
source: compiler-core/src/go/tests/custom_types.rs
expression: "\npub type TypeWithALongNameAndSeveralArguments{\n  TypeWithALongNameAndSeveralArguments(String, String, String, a: String, b: String)\n}\n\npub const local = TypeWithALongNameAndSeveralArguments(\"one\", \"two\", \"three\", \"four\", \"five\")\n"
snapshot_kind: text
---
----- SOURCE CODE

pub type TypeWithALongNameAndSeveralArguments{
  TypeWithALongNameAndSeveralArguments(String, String, String, a: String, b: String)
}

pub const local = TypeWithALongNameAndSeveralArguments("one", "two", "three", "four", "five")


----- COMPILED GO
package mod_P

import (
  gleam_P "example.com/todo/gleam"
)

const _ = gleam_P.Use_Import
const Use_Import byte = 0

type TypeWithALongNameAndSeveralArguments_c struct {
  P_0 gleam_P.String_t
  P_1 gleam_P.String_t
  P_2 gleam_P.String_t
  A gleam_P.String_t
  B gleam_P.String_t
}

func (c TypeWithALongNameAndSeveralArguments_c) Hash() uint32 {
  h := gleam_P.NewHash()
  var hh uint32
  hh = c.P_0.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  hh = c.P_1.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  hh = c.P_2.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  hh = c.A.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  hh = c.B.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  return h.Sum32()
}
func (c TypeWithALongNameAndSeveralArguments_c) Equal(o TypeWithALongNameAndSeveralArguments_c) bool {
  _ = o
  if !c.P_0.Equal(o.P_0) { return false }
  if !c.P_1.Equal(o.P_1) { return false }
  if !c.P_2.Equal(o.P_2) { return false }
  if !c.A.Equal(o.A) { return false }
  if !c.B.Equal(o.B) { return false }
  return true
}

type TypeWithALongNameAndSeveralArguments_t = TypeWithALongNameAndSeveralArguments_c

var Local TypeWithALongNameAndSeveralArguments_t = TypeWithALongNameAndSeveralArguments_c{
  "one",
  "two",
  "three",
  "four",
  "five",
}
