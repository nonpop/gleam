---
source: compiler-core/src/go/tests/bugs.rs
expression: "\ntype Box(a) { Box(a) }\n\nfn foo(x) {\n    case 0 {\n        _ if x == Box(0) -> 1\n        _ -> 2\n    }\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

type Box(a) { Box(a) }

fn foo(x) {
    case 0 {
        _ if x == Box(0) -> 1
        _ -> 2
    }
}


----- COMPILED GO
package mod_P

import (
  gleam_P "example.com/todo/gleam"
)

const _ = gleam_P.Use_Import
const Use_Import byte = 0

type box_c[I gleam_P.Type[I]] struct {p_0 I}

func (c box_c[I]) Hash() uint32 {
  h := gleam_P.NewHash()
  var hh uint32
  hh = c.p_0.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  return h.Sum32()
}
func (c box_c[I]) Equal(o box_c[I]) bool {
  _ = o
  if !c.p_0.Equal(o.p_0) { return false }
  return true
}

type box_t[I gleam_P.Type[I]] = box_c[I]

func foo(x box_t[gleam_P.Int_t]) gleam_P.Int_t {
  var _a gleam_P.Int_t = 0
  _ = _a
  if gleam_P.Bool_t(x.Equal(box_c[gleam_P.Int_t]{0})) {
    return 1
  } else {
    return 2
  }
}
