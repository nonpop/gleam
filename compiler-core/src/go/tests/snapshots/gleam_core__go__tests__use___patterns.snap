---
source: compiler-core/src/go/tests/use_.rs
expression: "\npub fn main() {\n  use Box(x) <- apply(Box(1))\n  x\n}\n\ntype Box(a) {\n  Box(a)\n}\n\nfn apply(arg, fun) {\n  fun(arg)\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

pub fn main() {
  use Box(x) <- apply(Box(1))
  x
}

type Box(a) {
  Box(a)
}

fn apply(arg, fun) {
  fun(arg)
}


----- COMPILED GO
package mod_P

import (
  gleam_P "example.com/todo/gleam"
)

const _ = gleam_P.Use_Import
const Use_Import byte = 0

type box_c[I gleam_P.Type[I]] struct {p_0 I}

func (c box_c[I]) Hash() uint32 {
  h := gleam_P.NewHash()
  var hh uint32
  hh = c.p_0.Hash()
  if _, err := h.Write([]byte{byte(hh), byte(hh >> 8), byte(hh >> 16), byte(hh >> 24)}); err != nil { panic (err) }
  return h.Sum32()
}
func (c box_c[I]) Equal(o box_c[I]) bool {
  _ = o
  if !c.p_0.Equal(o.p_0) { return false }
  return true
}

type box_t[I gleam_P.Type[I]] = box_c[I]

func apply[K gleam_P.Type[K], O gleam_P.Type[O]](
  arg K,
  fun gleam_P.Func1_t[K, O],
) O {
  return fun(arg)
}

func Main() gleam_P.Int_t {
  return apply[box_t[gleam_P.Int_t], gleam_P.Int_t](
    box_c[gleam_P.Int_t]{1},
    func(_use0 box_t[gleam_P.Int_t]) gleam_P.Int_t {
      var x gleam_P.Int_t = _use0.p_0
      _ = x
      return x
    },
  )
}
